{"version":3,"file":"static/js/846.846b3e1b.chunk.js","mappings":"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","sources":["webpack://client/./src/components/CMSForm/CMSForm.module.css?eb52","components/CMSForm/CMSForm.tsx","components/Form/TextArea.tsx","webpack://client/./src/components/Form/Form.module.css?89ba","components/Form/Form.tsx","components/Form/Input.tsx","components/Form/FormControl.tsx","webpack://client/./src/components/Spinner/Spinner.module.css?d43e","components/Spinner/Spinner.tsx","hooks/useCMS.ts","hooks/useForm.ts","pages/CMS/NewPost.tsx","utils/handleAuthError.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"buttons\":\"CMSForm_buttons__s1gOo\"};","import { Editor } from '@tinymce/tinymce-react';\nimport React from 'react';\nimport { TINYMCE_KEY } from '../../config';\nimport Form, { FormControl, IErrors, Input } from '../Form';\nimport Spinner from '../Spinner';\nimport s from './CMSForm.module.css';\n\nconst init = {\n  height: 500,\n  menubar: false,\n  plugins: 'codesample',\n  toolbar:\n    'undo redo | formatselect | ' +\n    'bold italic | alignleft aligncenter ' +\n    'alignright alignjustify | bullist numlist outdent indent | ' +\n    'removeformat | codesample',\n  content_style:\n    'body { font-family:Helvetica,Arial,sans-serif; font-size:18px }'\n};\n\ninterface CMSFormProps {\n  formValues: { [key: string]: string };\n  submitHandler: (e: React.FormEvent) => void;\n  isLoading: boolean;\n  isRequired?: boolean;\n  errors: IErrors[];\n  changeHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  editorValue: string;\n  setEditorValue: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport default function CMSForm({\n  formValues,\n  submitHandler,\n  isLoading,\n  isRequired,\n  errors,\n  changeHandler,\n  editorValue,\n  setEditorValue\n}: CMSFormProps) {\n  return (\n    <Form customButtons onSubmit={submitHandler} isLoading={isLoading}>\n      <FormControl id=\"title\" label=\"Post Title\" errors={errors}>\n        <Input\n          type=\"text\"\n          name=\"title\"\n          id=\"title\"\n          value={formValues.title}\n          onChange={changeHandler}\n        />\n      </FormControl>\n      <FormControl id=\"tag\" label=\"Post Tag\" errors={errors}>\n        <Input\n          type=\"text\"\n          name=\"tag\"\n          id=\"tag\"\n          value={formValues.tag}\n          onChange={changeHandler}\n        />\n      </FormControl>\n      <FormControl id=\"image\" label=\"Post Image\" errors={errors}>\n        <Input\n          type=\"file\"\n          name=\"image\"\n          id=\"image\"\n          onChange={changeHandler}\n          required={isRequired}\n        />\n      </FormControl>\n      <FormControl id=\"body\" label=\"Post Body\" errors={errors}>\n        <Editor\n          apiKey={TINYMCE_KEY}\n          value={editorValue}\n          onEditorChange={setEditorValue}\n          init={init}\n          id=\"body\"\n        />\n      </FormControl>\n      <div className={s.buttons}>\n        <button type=\"submit\" name=\"draft\" value=\"false\" disabled={isLoading}>\n          {isLoading ? <Spinner /> : 'Save as Draft'}\n        </button>\n        <button type=\"submit\" name=\"publish\" value=\"true\" disabled={isLoading}>\n          {isLoading ? <Spinner /> : 'Publish Post'}\n        </button>\n      </div>\n    </Form>\n  );\n}\n","import * as React from 'react';\n\ninterface TextAreaProps {\n  id: string;\n  name: string;\n  value: string;\n  onChange(e: React.FormEvent): void;\n}\n\nexport function TextArea({ id, name, value, onChange }: TextAreaProps) {\n  return (\n    <textarea id={id} name={name} value={value} onChange={onChange} />\n  )\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"label-text\":\"Form_label-text__-KdfF\",\"error-message\":\"Form_error-message__pIAv9\"};","import React from 'react';\nimport Spinner from '../Spinner';\nimport s from './Form.module.css';\n\ninterface FormProps {\n  children: React.ReactNode;\n  onSubmit(e: React.FormEvent): void;\n  isLoading: boolean;\n  customButtons?: boolean;\n}\n\nexport default function Form({\n  children,\n  onSubmit,\n  isLoading,\n  customButtons\n}: FormProps) {\n  return (\n    <form onSubmit={onSubmit} className={s.form}>\n      {children}\n      {!customButtons && (\n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? <Spinner /> : 'Submit'}\n        </button>\n      )}\n    </form>\n  );\n}\n","import React from 'react';\n\ninterface InputProps {\n  type: string;\n  id: string;\n  name: string;\n  value?: string;\n  onChange(e: React.ChangeEvent<HTMLInputElement>): void;\n  required?: boolean;\n}\n\nexport function Input({\n  type,\n  id,\n  name,\n  value,\n  onChange,\n  required\n}: InputProps) {\n  return (\n    <input\n      type={type}\n      id={id}\n      name={name}\n      value={value}\n      onChange={onChange}\n      required={required}\n    />\n  );\n}\n","import * as React from 'react';\nimport { useAutoAnimate } from '@formkit/auto-animate/react';\nimport s from './Form.module.css';\n\nexport interface IErrors {\n  param: string;\n  msg: string;\n}\n\ninterface FormControlProps {\n  children: React.ReactNode;\n  id: string;\n  label: string;\n  errors: IErrors[] | [];\n}\n\n\nexport function FormControl({ children, id, label, errors = [] }: FormControlProps) {\n  const [labelRef] = useAutoAnimate<HTMLLabelElement>();\n  const message = errors.find((el) => el.param === id)?.msg;\n\n  return (\n    <label htmlFor={id} ref={labelRef}>\n      <p className={s['label-text']}>{label}</p>\n      {children}\n      {message && <p className={s[\"error-message\"]}>{message}</p>}\n    </label>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"spinner\":\"Spinner_spinner__Z6H3Z\",\"spin\":\"Spinner_spin__Q9zsz\"};","import s from './Spinner.module.css';\n\nexport default function Spinner() {\n  return <div className={s.spinner}>\n    <div />\n  </div>\n}\n","import * as React from 'react';\nimport { CMSContext } from '../context/CMSProvider';\n\nexport default function useCMS() {\n  const context = React.useContext(CMSContext);\n\n  if (!context) throw new Error('useCMS can only be used inside a CMSProvider');\n\n  return context;\n}\n","import * as React from 'react';\nimport { IErrors } from '../components/Form';\n\nexport default function useForm<T>(initialValue: T) {\n  const [formValues, setFormValues] = React.useState(initialValue);\n  const [errors, setErrors] = React.useState<IErrors[] | []>([]);\n\n  const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, files } = e.target;\n\n    setFormValues((prevState) => ({\n      ...prevState,\n      [name]: name === 'image' ? files?.[0] : value\n    }));\n  };\n\n  return { formValues, errors, changeHandler, setErrors, setFormValues };\n}\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AxiosError } from 'axios';\nimport useForm from '../../hooks/useForm';\nimport useCMS from '../../hooks/useCMS';\nimport handleAuthError from '../../utils/handleAuthError';\nimport CMSForm from '../../components/CMSForm';\n\nconst formInitialValues = {\n  title: '',\n  tag: '',\n  image: ''\n};\n\nexport default function EditPost() {\n  const { getPost, createPost } = useCMS();\n  const navigate = useNavigate();\n  const [editorValue, setEditorValue] = React.useState('');\n  const [isLoading, setIsLoading] = React.useState(false);\n  const { formValues, changeHandler, errors, setErrors } =\n    useForm(formInitialValues);\n\n  const submitHandler = async (e: React.FormEvent) => {\n    try {\n      e.preventDefault();\n      const { submitter } = e.nativeEvent as SubmitEvent;\n      const { name } = submitter as HTMLButtonElement;\n      const data = new FormData();\n      data.append('image', formValues.image);\n      data.append('body', editorValue);\n      data.append('title', formValues.title);\n      data.append('tag', formValues.tag);\n      setIsLoading(true);\n      const response = await createPost(data, name);\n\n      setIsLoading(false);\n      if (response.data.errors) return setErrors(response.data.errors);\n\n      await getPost(response.data.post._id as string);\n      navigate(`/cms`)\n    } catch (err) {\n      setErrors(handleAuthError(err as AxiosError));\n    }\n  };\n\n  return (\n    <div>\n      <CMSForm\n        formValues={formValues}\n        submitHandler={submitHandler}\n        changeHandler={changeHandler}\n        isLoading={isLoading}\n        isRequired\n        errors={errors}\n        editorValue={editorValue}\n        setEditorValue={setEditorValue}\n      />\n    </div>\n  );\n}\n","import { AxiosError, AxiosResponse } from 'axios';\n\nconst ErrMessages = {\n  NO_USER: 'User does not exist',\n  INVALID_PASSWORD: 'Invalid Password'\n};\n\nexport default function handleAuthError(err: AxiosError) {\n  const response = err.response as AxiosResponse;\n  switch (response.data.message) {\n    case ErrMessages.NO_USER:\n      return [{ param: 'email', msg: ErrMessages.NO_USER }];\n    case ErrMessages.INVALID_PASSWORD:\n      return [{ param: 'password', msg: ErrMessages.INVALID_PASSWORD }];\n    default:\n      return [];\n  }\n}\n"],"names":["init","height","menubar","plugins","toolbar","content_style","CMSForm","formValues","submitHandler","isLoading","isRequired","errors","changeHandler","editorValue","setEditorValue","Form","customButtons","onSubmit","id","label","type","name","value","title","onChange","tag","required","apiKey","TINYMCE_KEY","onEditorChange","className","s","disabled","Spinner","TextArea","children","Input","FormControl","useAutoAnimate","labelRef","message","find","el","param","msg","htmlFor","ref","useCMS","context","React","CMSContext","Error","useForm","initialValue","setFormValues","e","target","files","prevState","setErrors","formInitialValues","image","EditPost","getPost","createPost","navigate","useNavigate","setIsLoading","preventDefault","nativeEvent","submitter","data","FormData","append","response","post","_id","handleAuthError","ErrMessages","err"],"sourceRoot":""}